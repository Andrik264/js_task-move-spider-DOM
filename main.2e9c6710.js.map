{"version":3,"sources":["scripts/main.js"],"names":["css","element","style","property","wall","document","querySelector","spider","_isAxisX","axis","maxCoordinates","minX","maxX","clientWidth","width","minY","maxY","clientHeight","height","validateAxisValue","value","isAxisX","result","isCorrect","newCoordinate","addEventListener","e","contains","target","clientX","clickCoordinates","clientY","newCoordinates","x","offsetLeft","clientLeft","y","offsetTop","clientTop","Object","entries","forEach","axisValidator","left","top"],"mappings":"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","file":"main.2e9c6710.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nfunction css(element, style) {\n  for (const property in style) {\n    element.style[property] = style[property];\n  }\n}\n\nconst wall = document.querySelector('.wall');\nconst spider = document.querySelector('.spider');\n\nconst _isAxisX = (axis) => axis === 'x';\nconst maxCoordinates = {\n  minX: 0,\n  maxX: wall.clientWidth - spider.width,\n\n  minY: 0,\n  maxY: wall.clientHeight - spider.height,\n};\n\nfunction validateAxisValue(axis, value) {\n  const { minX, maxX, minY, maxY } = maxCoordinates;\n  const isAxisX = _isAxisX(axis);\n\n  const result = isAxisX ? {\n    isCorrect: minX <= value && value <= maxX,\n  } : {\n    isCorrect: minY <= value && value <= maxY,\n  };\n\n  if (!result.isCorrect) {\n    return {\n      ...result,\n      newCoordinate: isAxisX\n        ? value < minX ? minX : maxX // new X coordinate\n        : value < minY ? minY : maxY, // new Y coordinate\n    };\n  }\n\n  return result;\n}\n\ndocument.addEventListener('click', e => {\n  if (!wall.contains(e.target)) {\n    return;\n  }\n\n  const { clientX, clientY } = e;\n  const clickCoordinates = {\n    x: clientX,\n    y: clientY,\n  };\n\n  const limitX = (wall.offsetLeft + wall.clientLeft) + (spider.width / 2);\n  const limitY = (wall.offsetTop + wall.clientTop) + (spider.height / 2);\n  const newCoordinates = {\n    x: clickCoordinates.x - limitX,\n    y: clickCoordinates.y - limitY,\n  };\n\n  Object.entries(newCoordinates).forEach(([axis, value]) => {\n    const axisValidator = validateAxisValue(axis, value);\n\n    if (!axisValidator.isCorrect) {\n      newCoordinates[axis] = axisValidator.newCoordinate;\n    }\n  });\n\n  css(spider, {\n    left: `${newCoordinates.x}px`,\n    top: `${newCoordinates.y}px`,\n  });\n});\n"]}